
services: 

    # SQL
    pgsql:
        build:
            context: backend/database/PostgreSQL/docker/
            dockerfile: Dockerfile
        env_file: backend/database/PostgreSQL/docker/.env.local
        ports: 
            - '5321:5432'        
        volumes: 
            - ./backend/database/PostgreSQL/docker/volumes/postgresql_data:/var/lib/postgresql/data
        networks:
            - myAppNetwork

    # NO SQL 
    qdrant_db:
        build:
            context: backend/database/qdrant/docker/
            dockerfile: Dockerfile
        env_file: backend/database/qdrant/docker/.env.local
        ports: 
            - "6333:6333"
            - "6334:6334"   
        volumes:
            - ./backend/database/qdrant/docker/volumes/qdrant_data:/qdrant/storage
        networks:
            - myAppNetwork

    redis_db:
        build:
            context: backend/database/redis/docker/
            dockerfile: Dockerfile
        env_file: backend/database/redis/docker/.env.local
        ports: 
            - '6379:6379'      
        volumes:
            - ./backend/database/redis/docker/volumes/redis_data:/redis/storage   
        networks:
            - myAppNetwork

    # Graph DB
    neo4j:
        build:
            context: backend/database/neo4j/docker/
            dockerfile: Dockerfile
        env_file: backend/database/neo4j/docker/.env.local
        ports:
            - "7474:7474"
            - "7687:7687"
        volumes:
            - ./backend/database/neo4j/docker/volumes/neo4j_data:/data
            - ./backend/database/neo4j/docker/volumes/neo4j_data:/logs
        networks:
            - myAppNetwork
    


    ## Python
    # # Fast API 
    rag_app:
        build:
            context: backend/python/
            dockerfile: simple_fastAPI/app/Dockerfile
        env_file: backend/python/simple_fastAPI/app/.env.local
        ports: 
            - '9876:9876'         
        networks:
            - myAppNetwork

    # #  LLM inference  
    vllm:
        build:
            context: backend/python/vllm/docker/
            dockerfile: Dockerfile
        env_file: backend/python/vllm/docker/.env.local
        volumes: 
            - ./backend/python/vllm/docker/vllm_data:/root/.cache/huggingface
        ports: 
            - '8989:8080'         
        networks:
            - myAppNetwork


    # #  LLM inference  
    litellm:
        build:
            context: backend/python/LiteLLM/docker/
            dockerfile: Dockerfile
        env_file: backend/python/LiteLLM/docker/.env.local
        # volumes:  
        #     - backend/python/LiteLLM/docker/litellm-config.yaml:/app/config.yaml
        ports: 
            - '4000:4000' 
        command: [ "--config", "/app/config.yaml", "--port", "4000", "--num_workers", "8" ]        
        networks:
            - myAppNetwork


    # Go
    ollama:
        build:
            context: backend/Go/ollama/docker/
            dockerfile: Dockerfile 
        env_file: backend/Go/ollama/docker/.env.local
        ports:
            - 11434:11434
        volumes: 
            - ./backend/Go/ollama/docker/ollama/ollama_data:/root/.ollama  
            - ./backend/Go/ollama/docker/ollama/ollama_data:/output   
        pull_policy: always
        tty: true
        restart: always
        networks:
            - myAppNetwork  
        
    # Svelte
    open-webui: 
        image: ghcr.io/open-webui/open-webui:main
        pull_policy: always
        ports:
        - 3000:8080
        volumes:
            - ./backend/Svelte/open-webui/docker/volumes/open_webui_data:/app/backend/data  
        restart: unless-stopped
        networks:
        - myAppNetwork
        depends_on:
        - ollama      
        environment:
        - '/ollama/api=http://ollama:11434/api'
        - 'OLLAMA_BASE_URL=http://ollama:11434'
        # - 'OPENAI_API_BASE_URLS=${OPENAI_API_BASE_URLS}'
        # - 'OPENAI_API_KEYS=${OPENAI_API_KEYS}'      
        extra_hosts:
            - host.docker.internal:host-gateway

    # JavaScript
    anythingllm:
        build:
            context: frontend/JavaScript/Anythingllm/docker/
            dockerfile: Dockerfile
        env_file: frontend/JavaScript/Anythingllm/docker/.env.local
        ports: 
            - "3001:3001"  
        volumes:
            - ./frontend/JavaScript/Anythingllm/docker/volumes/Anythingllm_data:/app/server/storage
        networks:
            - myAppNetwork
   
networks:
    myAppNetwork:
        driver: bridge
  